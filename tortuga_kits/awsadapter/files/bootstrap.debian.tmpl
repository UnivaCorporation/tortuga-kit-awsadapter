#!/usr/bin/env python3

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import socket
import sys
import itertools
import subprocess
import random
import time
import base64
import json

# Support 3 and 2.7
try:
    import urllib2
    python3 = False
except:
    import urllib.request as urllib2
    python3 = True

### SETTINGS

def get_instance_data(path):
    url = 'http://169.254.169.254/latest/meta-data' + path

    req = urllib2.Request(url)

    for nCount in range(5):
        try:
            response = urllib2.urlopen(req)
            break
        except urllib2.URLError as ex:
            pass
        except urllib2.HTTPError as ex:
            if ex.code == 404:
                raise

            time.sleep(2 ** (nCount + 1))
    else:
        raise Exception('Unable to communicate with metadata webservice')

    if response.code != 200:
        raise Exception('Unable to read %s' % path)
    if python3:
        return response.read().decode()
    else:
        return response.read()

def addNode():
    tryCommand("mkdir -p /usr/local/share/ca-certificates")
    tryCommand("curl http://%s:8008/ca.pem > /usr/local/share/ca-certificates/tortuga-ca.crt" % installerIpAddress)
    tryCommand("/usr/sbin/update-ca-certificates")
    instance_id = get_instance_data('/instance-id')
    local_hostname = get_instance_data('/local-hostname')
    local_ipv4 = get_instance_data('/local-ipv4')
    data = {
            'node_details': {
                'name': local_hostname,
                'metadata': {
                    'ec2_instance_id': instance_id,
                    'ec2_ipaddress': local_ipv4,
                }
            }
           }
    # Add nodes workflow must print insertnode_request as JSON with specified
    # prefix so other tools can read this information
    print('Instance details: ' + json.dumps(data))

    req_data = insertnode_request
    if python3:
        req_data = insertnode_request.decode()
    url = 'https://%s:%s/v1/node-token/%s' % (installerHostName, port, req_data)
    req = urllib2.Request(url)

    req.add_header('Content-Type', 'application/json')

    for nCount in range(5):
        try:
            post_data = json.dumps(data)
            if python3:
                post_data = post_data.encode()
            response = urllib2.urlopen(req, post_data)
            break
        except urllib2.URLError as ex:
            pass
        except urllib2.HTTPError as ex:
            if ex.code == 401:
                raise Exception(
                    'Invalid Tortuga webservice credentials')
            elif ex.code == 404:
                # Unrecoverable
                raise Exception(
                    'URI not found; invalid Tortuga webservice'
                    ' configuration')

            time.sleep(2 ** (nCount + 1))
    else:
        raise Exception('Unable to communicate with Tortuga webservice')

    d = json.load(response)

    if response.code != 200:
        if 'error' in d:
            errmsg = 'Tortuga webservice error: msg=[%s]' % (
                error['message'])
        else:
            errmsg = 'Tortuga webservice internal error'

        raise Exception(errmsg)
    print(d)


def tryCommand(command, good_return_values=(0,), retry_limit=0,
               time_limit=0, max_sleep_time=15000, sleep_interval=2000):
    total_sleep_time = 0
    for retries in itertools.count(0):
        returned = subprocess.Popen(command, shell=True).wait()
        if returned in good_return_values or \
                retries >= retry_limit or total_sleep_time >= time_limit:
            return returned

        seed = min(max_sleep_time, sleep_interval * 2 ** retries)
        sleep_for = (seed / 2 + random.randint(0, seed / 2)) / 1000.0
        total_sleep_time += sleep_for

        time.sleep(sleep_for)


def _installPackage(pkgname, retries=10):
    cmd = 'apt-get --assume-yes install %s' % (pkgname)

    retval = tryCommand(cmd, retry_limit=retries)

    if retval != 0:
        sys.stderr.write('Error installing package [{0}]\n'.format(pkgname))
        sys.exit(1)


def _isPackageInstalled(pkgName):
    return tryCommand(
        'dpkg -l %s 2>/dev/null | grep -q ^ii' % pkgName) == 0


def installPuppet(codename):
    pkg = 'puppet6-release'

    url = 'http://apt.puppetlabs.com/{0}-{1}.deb'.format(pkg, codename)

    bRepoInstalled = _isPackageInstalled(pkg)

    if not bRepoInstalled:
        import tempfile
        import os

        tmptuple = tempfile.mkstemp()

        try:
            retval = tryCommand(
                'wget --tries 5 --retry-connrefused --timeout 120'
                ' --random-wait --quiet %s --output-document %s' % (
                    url, tmptuple[1]))

            if retval != 0:
                sys.stderr.write(
                    'Unable to install package [{0}]\n'.format(pkg))

                sys.exit(1)

            cmd = 'dpkg --install %s' % (tmptuple[1])

            retval = tryCommand(cmd)

            if retval != 0:
                sys.stderr.write('Error installing [{0}]\n'.format(pkg))
                sys.exit(1)
        finally:
            os.close(tmptuple[0])

            os.unlink(tmptuple[1])

        # Refresh APT repository metadata
        tryCommand('apt-get update')

    # Attempt to install puppet
    if not _isPackageInstalled('puppet-agent'):
        _installPackage('puppet-agent')

    # Ensure Puppet is configured not to start at boot
    tryCommand('systemctl disable puppet.service')
    tryCommand('systemctl stop puppet.service')


def updateResolver(domainName):
    with open('/etc/resolv.conf', 'w') as fp:
        if domainName:
            fp.write('search %s\n' % domainName)

        fp.write('nameserver %s\n' % installerIpAddress)


def bootstrapPuppet():
    tryCommand('touch /tmp/puppet_bootstrap.log')
    tryCommand('ln -s /bin/systemctl /usr/bin/systemctl')
    cmd = ('/opt/puppetlabs/bin/puppet agent --logdest /tmp/puppet_bootstrap.log'
           ' --no-daemonize --onetime --server %s --waitforcert 120' % installerHostName)

    tryCommand(cmd, good_return_values=(0, 2), time_limit=10 * 60)


def main():
    # This is at least necessary for Debian's official AMIs and it doesn't
    # hurt for Ubuntu either...

    tryCommand('apt-get update')

    # TODO: this is a temporary workaround until Puppet class is updated to
    # support wget
    if not _isPackageInstalled('curl'):
        _installPackage('curl')

    if insertnode_request is not None:
        addNode()

    import platform
    vals = platform.dist()

    if vals[0].lower() == 'debian':
        cmd = 'dpkg --status tzdata|grep Provides|cut -f2 -d\'-\''

        p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        while True:
            buf = p.stdout.readline()
            if not buf:
                break

            codename = str(buf.rstrip(), 'utf-8')

        retval = p.wait()
        if retval != 0:
            sys.stderr.write('Error: unable to determine Debian version\n')
            sys.exit(1)
    else:
        # Ubuntu reports the codename through platform.dist()
        codename = vals[2]

    installPuppet(codename)

    bootstrapPuppet()


if __name__ == '__main__':
    main()
