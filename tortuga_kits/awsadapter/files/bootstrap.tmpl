#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import socket
import sys
import itertools
import subprocess
import random
import urllib2
import time
import json
import os.path

### SETTINGS

def get_instance_data(path):
    url = 'http://169.254.169.254/latest/meta-data' + path

    req = urllib2.Request(url)

    for nCount in range(5):
        try:
            response = urllib2.urlopen(req)
            break
        except urllib2.URLError as ex:
            pass
        except urllib2.HTTPError as ex:
            if ex.code == 404:
                raise

            time.sleep(2 ** (nCount + 1))
    else:
        raise Exception('Unable to communicate with metadata webservice')

    if response.code != 200:
        raise Exception('Unable to read %s' % path)
    return response.read()

def addNode(local_hostname):
    tryCommand("mkdir -p /etc/pki/ca-trust/source/anchors/")
    tryCommand("curl http://%s:8008/ca.pem > /etc/pki/ca-trust/source/anchors/tortuga-ca.pem" % installerIpAddress)
    tryCommand("update-ca-trust")
    instance_id = get_instance_data('/instance-id')
    local_ipv4 = get_instance_data('/local-ipv4')
    data = {
            'node_details': {
                'name': local_hostname,
                'metadata': {
                    'ec2_instance_id': instance_id,
                    'ec2_ipaddress': local_ipv4,
                }
            }
           }
    # Add nodes workflow must print insertnode_request as JSON with specified
    # prefix so other tools can read this information
    print('Instance details: ' + json.dumps(data))

    url = 'https://%s:%s/v1/node-token/%s' % (installerHostName, port, insertnode_request)
    req = urllib2.Request(url)

    req.add_header('Content-Type', 'application/json')

    for nCount in range(5):
        try:
            response = urllib2.urlopen(req, json.dumps(data))
            break
        except urllib2.URLError as ex:
            pass
        except urllib2.HTTPError as ex:
            if ex.code == 401:
                raise Exception(
                    'Invalid Tortuga webservice credentials')
            elif ex.code == 404:
                # Unrecoverable
                raise Exception(
                    'URI not found; invalid Tortuga webservice'
                    ' configuration')

            time.sleep(2 ** (nCount + 1))
    else:
        raise Exception('Unable to communicate with Tortuga webservice')

    d = json.load(response)

    if response.code != 200:
        if 'error' in d:
            errmsg = 'Tortuga webservice error: msg=[%s]' % (
                error['message'])
        else:
            errmsg = 'Tortuga webservice internal error'

        raise Exception(errmsg)
    print(d)


def tryCommand(command, good_return_values=(0,), retry_limit=0,
               time_limit=0, max_sleep_time=15000, sleep_interval=2000):
    total_sleep_time = 0
    for retries in itertools.count(0):
        returned = subprocess.Popen(command, shell=True).wait()
        if returned in good_return_values:
            return returned
        if retry_limit is not None and retries >= retry_limit:
            return returned
        if time_limit is not None and total_sleep_time >= time_limit:
            return returned

        seed = min(max_sleep_time, sleep_interval * 2 ** retries)
        sleep_for = (seed / 2 + random.randint(0, seed / 2)) / 1000.0
        total_sleep_time += sleep_for

        time.sleep(sleep_for)


def _installPackage(pkgList, yumopts=None, retries=10):
    cmd = 'yum'

    if yumopts:
        cmd += ' ' + yumopts

    cmd += ' -y install %s' % pkgList

    retval = tryCommand(cmd, retry_limit=retries)
    if retval != 0:
        raise Exception('Error installing package [%s]' % (pkgList))


def _isPackageInstalled(pkgName):
    return tryCommand('rpm -q --quiet %s' % pkgName) == 0


def installPuppet(vers):
    pkgname = 'puppet6-release'

    url = 'http://yum.puppetlabs.com/puppet6/%s-el-%s.noarch.rpm' % (pkgname, vers)

    bRepoInstalled = _isPackageInstalled(pkgname)

    if not bRepoInstalled:
        retval = tryCommand('rpm -ivh %s' % (url), retry_limit=5)
        if retval != 0:
            sys.stderr.write(
                'Error: unable to install package \"{0}\"\n'.format(pkgname))

            sys.exit(1)

    # Attempt to install puppet
    if not _isPackageInstalled('puppet-agent'):
        _installPackage('puppet-agent')

def updateResolver(domainName):
    with open('/etc/resolv.conf', 'w') as fp:
        if domainName:
            fp.write('search %s\n' % domainName)

        fp.write('nameserver %s\n' % installerIpAddress)


def bootstrapPuppet():
    tryCommand('touch /tmp/puppet_bootstrap.log')
    cmd = ('/opt/puppetlabs/bin/puppet agent'
           ' --logdest /tmp/puppet_bootstrap.log'
           ' --no-daemonize --splay --splaylimit 3m'
           ' --onetime --server %s --waitforcert 120' % installerHostName)

    tryCommand(cmd, good_return_values=(0, 2), retry_limit=None,
               time_limit=None)


def main():
    fqdn = get_instance_data('/local-hostname')
    if override_dns_domain:
        # Disable NetworkManager dns if we can
        if os.path.isdir('/etc/NetworkManager/conf.d'):
            with open('/etc/NetworkManager/conf.d/dns.conf', 'w') as fp:
                fp.write('# Disabling for Tortuga custom domain name\n')
                fp.write('[main]\n')
                fp.write('dns=none\n')
            enabled = os.system('systemctl is-enabled NetworkManager')
            if enabled == 0:
                tryCommand('systemctl restart NetworkManager')

        with open('/etc/resolv.conf', 'w') as fp:
            fp.write('# Created by Tortuga\n')

            if dns_search is not None:
                fp.write('search %s\n' % (dns_search))

            if dns_options is not None:
                fp.write('options %s\n' % (dns_options))

            for dns_nameserver in dns_nameservers:
                fp.write('nameserver %s\n' % (dns_nameserver))

            fqdn = socket.getfqdn().split('.', 1)[0] + '.' + dns_domain

            tryCommand('hostnamectl set-hostname --static %s' % (fqdn))

    if insertnode_request is not None:
        addNode(fqdn)
    tryCommand('setenforce permissive')

    # append /etc/hosts entry for installer
    with open('/etc/hosts', 'a+') as fp:
        fp.write('%s\t%s\n' % (installerIpAddress, installerHostName))

    # check distro and version
    result = tryCommand(
        'rpm --query --queryformat %{VENDOR} system-release |'
        ' grep --quiet --ignore-case Amazon'
    )
    if result == 0:
        # amazon linuxv2
        tryCommand(
            'awk -F: \'{ print $6 }\' /etc/system-release-cpe |'
            'grep --quiet \'^2$\''
        )
        if result == 0:
            vers = 7
        else:
            vers = 6
    else:
        import platform

        vals = platform.dist()

        vers = vals[1].split('.')[0]

    if not _isPackageInstalled('git'):
        _installPackage('git')

    installPuppet(vers)

    bootstrapPuppet()


if __name__ == '__main__':
    main()
