#!/usr/bin/env python3

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import subprocess
import requests
import platform
import time
import base64
import json

### SETTINGS


def runCommand(cmd, retries=1):
    for nRetry in range(retries):
        p = subprocess.Popen(cmd, shell=True)

        retval = p.wait()
        if retval == 0:
            break

        time.sleep(5 + 2 ** (nRetry * 0.75))
    else:
        return -1

    return retval


def _installPackage(pkgname, retries=10):
    cmd = 'apt-get --assume-yes install %s' % (pkgname)

    retval = runCommand(cmd, retries)

    if retval != 0:
        sys.stderr.write('Error installing package [{0}]\n'.format(pkgname))
        sys.exit(1)


def _isPackageInstalled(pkgName):
    return runCommand(
        'dpkg -l %s 2>/dev/null | grep -q ^ii' % (pkgName)) == 0


def installPuppet(codename):
    pkg = 'puppetlabs-release-pc1'

    url = 'http://apt.puppetlabs.com/{0}-{1}.deb'.format(pkg, codename)

    bRepoInstalled = _isPackageInstalled(pkg)

    if not bRepoInstalled:
        import tempfile

        tmptuple = tempfile.mkstemp()

        try:
            retval = runCommand(
                'wget --tries 5 --retry-connrefused --timeout 120'
                ' --random-wait --quiet %s --output-document %s' % (
                    url, tmptuple[1]))

            if retval != 0:
                sys.stderr.write(
                    'Unable to install package [{0}]\n'.format(pkg))

                sys.exit(1)

            cmd = 'dpkg --install %s' % (tmptuple[1])

            retval = runCommand(cmd)

            if retval != 0:
                sys.stderr.write('Error installing [{0}]\n'.format(pkg))
                sys.exit(1)
        finally:
            os.close(tmptuple[0])

            os.unlink(tmptuple[1])

        # Refresh APT repository metadata
        runCommand('apt-get update')

    # Attempt to install puppet
    if not _isPackageInstalled('puppet-agent'):
        _installPackage('puppet-agent')

    # Ensure Puppet is configured not to start at boot
    runCommand('systemctl disable puppet.service')
    runCommand('systemctl stop puppet.service')


def setHostName():
    url = 'https://%s:%s/v1/identify-node' % (installerIpAddress, port)

    value = '%s:%s' % (cfmUser, cfmPassword)

    headers = {
        'Authorization': 'Basic ' + str(
            base64.b64encode(value.encode('utf-8')), 'utf-8'),
    }

    req = requests.get(url, headers=headers, verify=False)

    # TODO: add error checking here
    result = req.json()

    h = result['node']['name']

    runCommand('hostname %s' % (h))

    with open('/etc/hostname', 'a') as fp:
        fp.write('%s\n' % (h))

    return h


def updateResolver(domainName):
    with open('/etc/resolv.conf', 'w') as fp:
        if domainName:
            fp.write('search %s\n' % (domainName))

        fp.write('nameserver %s\n' % (installerIpAddress))


def bootstrapPuppet():
    cmd = ('/opt/puppetlabs/bin/puppet agent --logdest /tmp/puppet_bootstrap.log'
           ' --onetime --server %s --waitforcert 120' % (installerHostName))

    runCommand(cmd)


def main():
    # This is at least necessary for Debian's official AMIs and it doesn't
    # hurt for Ubuntu either...

    runCommand('apt-get update')

    # TODO: this is a temporary workaround until Puppet class is updated to
    # support wget
    if not _isPackageInstalled('curl'):
        _installPackage('curl')

    vals = platform.dist()

    if vals[0].lower() == 'debian':
        cmd = 'dpkg --status tzdata|grep Provides|cut -f2 -d\'-\''

        p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        while True:
            buf = p.stdout.readline()
            if not buf:
                break

            codename = str(buf.rstrip(), 'utf-8')

        retval = p.wait()
        if retval != 0:
            sys.stderr.write('Error: unable to determine Debian version\n')
            sys.exit(1)
    else:
        # Ubuntu reports the codename through platform.dist()
        codename = vals[2]

    installPuppet(codename)

    bootstrapPuppet()


if __name__ == '__main__':
    main()
